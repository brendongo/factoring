PRIMES = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,
          31, 37, 41, 43, 47, 53, 59, 61, 67, 71,
          73, 79, 83, 89, 97, 101, 103, 107, 109, 113,
          127, 131, 137, 139, 149, 151, 157, 163, 167, 173,
          179, 181, 191, 193, 197, 199, 211, 223, 227, 229,
          233, 239, 241, 251, 257, 263, 269, 271, 277, 281,
          283, 293, 307, 311, 313, 317, 331, 337, 347, 349,
          353, 359, 367, 373, 379, 383, 389, 397, 401, 409,
          419, 421, 431, 433, 439, 443, 449, 457, 461, 463,
          467, 479, 487, 491, 499, 503, 509, 521, 523, 541,
          547, 557, 563, 569, 571, 577, 587, 593, 599, 601,
          607, 613, 617, 619, 631, 641, 643, 647, 653, 659,
          661, 673, 677, 683, 691, 701, 709, 719, 727, 733,
          739, 743, 751, 757, 761, 769, 773, 787, 797, 809,
          811, 821, 823, 827, 829, 839, 853, 857, 859, 863,
          877, 881, 883, 887, 907, 911, 919, 929, 937, 941,
          947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013,
          1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069,
          1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151,
          1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223]

LARGER_PRIMES = [19913, 19919, 19927, 19937, 19949, 19961, 19963, 19973, 19979, 19991,
                 19993, 19997, 20011, 20021, 20023, 20029, 20047, 20051, 20063, 20071,
                 20089, 20101, 20107, 20113, 20117, 20123, 20129, 20143, 20147, 20149,
                 20161, 20173, 20177, 20183, 20201, 20219, 20231, 20233, 20249, 20261,
                 20269, 20287, 20297, 20323, 20327, 20333, 20341, 20347, 20353, 20357,
                 20359, 20369, 20389, 20393, 20399, 20407, 20411, 20431, 20441, 20443,
                 20477, 20479, 20483, 20507, 20509, 20521, 20533, 20543, 20549, 20551,
                 20563, 20593, 20599, 20611, 20627, 20639, 20641, 20663, 20681, 20693,
                 20707, 20717, 20719, 20731, 20743, 20747, 20749, 20753, 20759, 20771,
                 20773, 20789, 20807, 20809, 20849, 20857, 20873, 20879, 20887, 20897,
                 20899, 20903, 20921, 20929, 20939, 20947, 20959, 20963, 20981, 20983,
                 21001, 21011, 21013, 21017, 21019, 21023, 21031, 21059, 21061, 21067,
                 21089, 21101, 21107, 21121, 21139, 21143, 21149, 21157, 21163, 21169,
                 21179, 21187, 21191, 21193, 21211, 21221, 21227, 21247, 21269, 21277,
                 21283, 21313, 21317, 21319, 21323, 21341, 21347, 21377, 21379, 21383,
                 21391, 21397, 21401, 21407, 21419, 21433, 21467, 21481, 21487, 21491,
                 21493, 21499, 21503, 21517, 21521, 21523, 21529, 21557, 21559, 21563,
                 21569, 21577, 21587, 21589, 21599, 21601, 21611, 21613, 21617, 21647,
                 21649, 21661, 21673, 21683, 21701, 21713, 21727, 21737, 21739, 21751,
                 21757, 21767, 21773, 21787, 21799, 21803, 21817, 21821, 21839, 21841,
                 21851, 21859, 21863, 21871, 21881, 21893, 21911, 21929, 21937, 21943,
                 21961, 21977, 21991, 21997, 22003, 22013, 22027, 22031, 22037, 22039,
                 22051, 22063, 22067, 22073, 22079, 22091, 22093, 22109, 22111, 22123,
                 22129, 22133, 22147, 22153, 22157, 22159, 22171, 22189, 22193, 22229,
                 22247, 22259, 22271, 22273, 22277, 22279, 22283, 22291, 22303, 22307,
                 22343, 22349, 22367, 22369, 22381, 22391, 22397, 22409, 22433, 22441,
                 22447, 22453, 22469, 22481, 22483, 22501, 22511, 22531, 22541, 22543,
                 22549, 22567, 22571, 22573, 22613, 22619, 22621, 22637, 22639, 22643,
                 22651, 22669, 22679, 22691, 22697, 22699, 22709, 22717, 22721, 22727,
                 22739, 22741, 22751, 22769, 22777, 22783, 22787, 22807, 22811, 22817,
                 22853, 22859, 22861, 22871, 22877, 22901, 22907, 22921, 22937, 22943,
                 22961, 22963, 22973, 22993, 23003, 23011, 23017, 23021, 23027, 23029,
                 23039, 23041, 23053, 23057, 23059, 23063, 23071, 23081, 23087, 23099,
                 23117, 23131, 23143, 23159, 23167, 23173, 23189, 23197, 23201, 23203,
                 23209, 23227, 23251, 23269, 23279, 23291, 23293, 23297, 23311, 23321,
                 23327, 23333, 23339, 23357, 23369, 23371, 23399, 23417, 23431, 23447,
                 23459, 23473, 23497, 23509, 23531, 23537, 23539, 23549, 23557, 23561,
                 23563, 23567, 23581, 23593, 23599, 23603, 23609, 23623, 23627, 23629,
                 23633, 23663, 23669, 23671, 23677, 23687, 23689, 23719, 23741, 23743,
                 23747, 23753, 23761, 23767, 23773, 23789, 23801, 23813, 23819, 23827,
                 23831, 23833, 23857, 23869, 23873, 23879, 23887, 23893, 23899, 23909,
                 23911, 23917, 23929, 23957, 23971, 23977, 23981, 23993, 24001, 24007,
                 24019, 24023, 24029, 24043, 24049, 24061, 24071, 24077, 24083, 24091,
                 24097, 24103, 24107, 24109, 24113, 24121, 24133, 24137, 24151, 24169,
                 24179, 24181, 24197, 24203, 24223, 24229, 24239, 24247, 24251, 24281,
                 24317, 24329, 24337, 24359, 24371, 24373, 24379, 24391, 24407, 24413,
                 24419, 24421, 24439, 24443, 24469, 24473, 24481, 24499, 24509, 24517,
                 24527, 24533, 24547, 24551, 24571, 24593, 24611, 24623, 24631, 24659]

def is_b_smooth(n, base):
    """
        If n is b-smooth returns the exponents each factor in the base
        must be raised to to get n. Otherwise returns None. Operates using
        repeated division: tries to divide by each factor until it can no
        longer.


        Args:
            n: Int, the number we are testing for b-smoothness
            base: List(Int), our factor base

        Returns:
            [Int]: exponents factors must be raised to to get n
                    if n is b-smooth. Otherwise None
    """
    exponents = []
    for p in base:
        exp = 0
        while n % p == 0:
            exp += 1
            n /= p
        exponents.append(exp)

    if n == 1:
        return exponents
    return None


def is_quadratic_residue(n, p):
    """
        Check if n is a quadratic residue of p using Euler's Criterion

        Args:
            n: int
            p: int

        Returns:
            true of n is a quadratic residue of p
            false otherwise
    """

    # Everything is a quadratic residue of 2
    if p == 2:
        return True

    # If n and p aren't coprime then n is a quadratic residue of p
    if n % p == 0:
        return True

    return ((n ** ((p - 1) / 2)) % p) == 1